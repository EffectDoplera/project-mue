/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphql/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateOperationInput: { // input type
    amount: number; // Float!
    category: string; // String!
    commentary?: string | null; // String
    currency: NexusGenEnums['Currency']; // Currency!
    date: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    type: NexusGenEnums['OperationType']; // OperationType!
  }
}

export interface NexusGenEnums {
  Currency: "EUR" | "RUB" | "USD"
  OperationType: "EXPENSE" | "INCOME"
  Role: "ADMIN" | "QA" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Mutation: {};
  Operation: { // root type
    amount: number; // Float!
    category: string; // String!
    commentary?: string | null; // String
    currency: NexusGenEnums['Currency']; // Currency!
    date: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    title: string; // String!
    type: string; // String!
  }
  OperationByCategory: { // root type
    amount?: number | null; // Float
    category: string; // String!
  }
  OperationCategory: { // root type
    id: string; // ID!
    title: string; // String!
  }
  Query: {};
  User: { // root type
    email?: string | null; // String
    email_verified?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    image?: string | null; // String
    name?: string | null; // String
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createOperation: NexusGenRootTypes['Operation'] | null; // Operation
  }
  Operation: { // field return type
    amount: number; // Float!
    category: string; // String!
    commentary: string | null; // String
    currency: NexusGenEnums['Currency']; // Currency!
    date: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    title: string; // String!
    type: string; // String!
  }
  OperationByCategory: { // field return type
    amount: number | null; // Float
    category: string; // String!
  }
  OperationCategory: { // field return type
    id: string; // ID!
    title: string; // String!
  }
  Query: { // field return type
    allCategories: NexusGenRootTypes['OperationCategory'][]; // [OperationCategory!]!
    operations: NexusGenRootTypes['Operation'][] | null; // [Operation!]
    sumAllOperations: number; // Int!
    sumAllOperationsByCategory: NexusGenRootTypes['OperationByCategory'][]; // [OperationByCategory!]!
    users: NexusGenRootTypes['User'][] | null; // [User!]
  }
  User: { // field return type
    email: string | null; // String
    email_verified: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    image: string | null; // String
    name: string | null; // String
    operations: NexusGenRootTypes['Operation'][]; // [Operation!]!
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createOperation: 'Operation'
  }
  Operation: { // field return type name
    amount: 'Float'
    category: 'String'
    commentary: 'String'
    currency: 'Currency'
    date: 'DateTime'
    id: 'ID'
    title: 'String'
    type: 'String'
  }
  OperationByCategory: { // field return type name
    amount: 'Float'
    category: 'String'
  }
  OperationCategory: { // field return type name
    id: 'ID'
    title: 'String'
  }
  Query: { // field return type name
    allCategories: 'OperationCategory'
    operations: 'Operation'
    sumAllOperations: 'Int'
    sumAllOperationsByCategory: 'OperationByCategory'
    users: 'User'
  }
  User: { // field return type name
    email: 'String'
    email_verified: 'DateTime'
    id: 'ID'
    image: 'String'
    name: 'String'
    operations: 'Operation'
    role: 'Role'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOperation: { // args
      input: NexusGenInputs['CreateOperationInput']; // CreateOperationInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}